# -*- coding: utf-8 -*-
"""B11056251陳湘宇_CH15深度學習_習題練習.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SMSpn10orbJF4Ae_auvS6saxTE-IXblP

#B11056251 陳湘宇 ch15習題2
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.utils import to_categorical

# 載入 MNIST 資料集
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# 資料前處理
train_images = train_images.reshape((60000, 28, 28, 1))
train_images = train_images.astype('float32') / 255.0

test_images = test_images.reshape((10000, 28, 28, 1))
test_images = test_images.astype('float32') / 255.0

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

# 建立卷積神經網路
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(10, activation='softmax'))

# 編譯模型
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# 訓練模型
model.fit(train_images, train_labels, epochs=5, batch_size=64)

# 評估模型
_, train_acc = model.evaluate(train_images, train_labels)
_, test_acc = model.evaluate(test_images, test_labels)

print("CNN - Train Accuracy:", train_acc)
print("CNN - Test Accuracy:", test_acc)

# 使用人工神經網路（多層感知機）進行比較
mlp_model = Sequential()
mlp_model.add(Flatten(input_shape=(28, 28)))
mlp_model.add(Dense(64, activation='relu'))
mlp_model.add(Dense(10, activation='softmax'))

mlp_model.compile(optimizer='adam',
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])

mlp_model.fit(train_images, train_labels, epochs=5, batch_size=64)

_, mlp_train_acc = mlp_model.evaluate(train_images, train_labels)
_, mlp_test_acc = mlp_model.evaluate(test_images, test_labels)

print("MLP - Train Accuracy:", mlp_train_acc)
print("MLP - Test Accuracy:", mlp_test_acc)

"""#B11056251 陳湘宇 ch15習題3  CNN_cifary10.py



"""

from tensorflow.keras.datasets import cifar10
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.utils import to_categorical
import numpy as np

# 載入CIFAR-10資料集
(train_images, train_labels), (test_images, test_labels) = cifar10.load_data()

# 建立卷積神經網路
network = Sequential()
network.add(Conv2D(filters=32, kernel_size=(3, 3), input_shape=(32, 32, 3), activation='relu', padding='same'))
network.add(MaxPooling2D(pool_size=(2, 2)))
network.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu', padding='same'))
network.add(MaxPooling2D(pool_size=(2, 2)))
network.add(Flatten())
network.add(Dense(1024, activation='relu'))
network.add(Dense(10, activation='softmax'))

network.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

print(network.summary())

# 資料前處理
train_images = train_images.astype('float32') / 255
test_images = test_images.astype('float32') / 255
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

# 訓練階段
network.fit(train_images, train_labels, epochs=10, batch_size=200)

# 測試階段
test_loss, test_acc = network.evaluate(test_images, test_labels)
print("Test Accuracy:", test_acc)

"""#B11056251 陳湘宇 ch15習題4  

"""

import tensorflow as tf
from tensorflow.keras.datasets import cifar100
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.utils import to_categorical

# 載入 CIFAR-100 資料集
(train_images, train_labels), (test_images, test_labels) = cifar100.load_data()

# 資料前處理
train_images = train_images.astype('float32') / 255.0
test_images = test_images.astype('float32') / 255.0
train_labels = to_categorical(train_labels, num_classes=100)
test_labels = to_categorical(test_labels, num_classes=100)

# 建立卷積神經網路
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(100, activation='softmax'))

# 編譯模型
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# 訓練模型
model.fit(train_images, train_labels, epochs=10, batch_size=128, validation_data=(test_images, test_labels))

# 評估模型
test_loss, test_acc = model.evaluate(test_images, test_labels)
print("Test Accuracy:", test_acc)